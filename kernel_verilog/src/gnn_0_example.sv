// This is a generated file. Use and modify at your own risk.
//////////////////////////////////////////////////////////////////////////////// 
// Author: Kai Zhong
// Mail  : zhongkai2020@sina.com
// Date  : 2022.12.15
// Info  : generated by Vitis. Changes are noted by [added] and [modified]
//////////////////////////////////////////////////////////////////////////////// 
// default_nettype of none prevents implicit wire declaration.
`default_nettype none
module gnn_0_example #(
  parameter integer C_INST_AXI_ADDR_WIDTH    = 64 ,
  parameter integer C_INST_AXI_DATA_WIDTH    = 512,
  parameter integer C_WEIGHT_AXI_ADDR_WIDTH  = 64 ,
  parameter integer C_WEIGHT_AXI_DATA_WIDTH  = 512,
  parameter integer C_BIAS_AXI_ADDR_WIDTH    = 64 ,
  parameter integer C_BIAS_AXI_DATA_WIDTH    = 512,
  parameter integer C_FEATURE_AXI_ADDR_WIDTH = 64 ,
  parameter integer C_FEATURE_AXI_DATA_WIDTH = 512,
  parameter integer C_ADJ_AXI_ADDR_WIDTH     = 64 ,
  parameter integer C_ADJ_AXI_DATA_WIDTH     = 512
)
(
  // System Signals
  input  wire                                  ap_clk             ,
  input  wire                                  ap_rst_n           ,
  // AXI4 master interface inst_axi
  output wire                                  inst_axi_awvalid   ,
  input  wire                                  inst_axi_awready   ,
  output wire [C_INST_AXI_ADDR_WIDTH-1:0]      inst_axi_awaddr    ,
  output wire [8-1:0]                          inst_axi_awlen     ,
  output wire                                  inst_axi_wvalid    ,
  input  wire                                  inst_axi_wready    ,
  output wire [C_INST_AXI_DATA_WIDTH-1:0]      inst_axi_wdata     ,
  output wire [C_INST_AXI_DATA_WIDTH/8-1:0]    inst_axi_wstrb     ,
  output wire                                  inst_axi_wlast     ,
  input  wire                                  inst_axi_bvalid    ,
  output wire                                  inst_axi_bready    ,
  output wire                                  inst_axi_arvalid   ,
  input  wire                                  inst_axi_arready   ,
  output wire [C_INST_AXI_ADDR_WIDTH-1:0]      inst_axi_araddr    ,
  output wire [8-1:0]                          inst_axi_arlen     ,
  input  wire                                  inst_axi_rvalid    ,
  output wire                                  inst_axi_rready    ,
  input  wire [C_INST_AXI_DATA_WIDTH-1:0]      inst_axi_rdata     ,
  input  wire                                  inst_axi_rlast     ,
  // AXI4 master interface weight_axi
  output wire                                  weight_axi_awvalid ,
  input  wire                                  weight_axi_awready ,
  output wire [C_WEIGHT_AXI_ADDR_WIDTH-1:0]    weight_axi_awaddr  ,
  output wire [8-1:0]                          weight_axi_awlen   ,
  output wire                                  weight_axi_wvalid  ,
  input  wire                                  weight_axi_wready  ,
  output wire [C_WEIGHT_AXI_DATA_WIDTH-1:0]    weight_axi_wdata   ,
  output wire [C_WEIGHT_AXI_DATA_WIDTH/8-1:0]  weight_axi_wstrb   ,
  output wire                                  weight_axi_wlast   ,
  input  wire                                  weight_axi_bvalid  ,
  output wire                                  weight_axi_bready  ,
  output wire                                  weight_axi_arvalid ,
  input  wire                                  weight_axi_arready ,
  output wire [C_WEIGHT_AXI_ADDR_WIDTH-1:0]    weight_axi_araddr  ,
  output wire [8-1:0]                          weight_axi_arlen   ,
  input  wire                                  weight_axi_rvalid  ,
  output wire                                  weight_axi_rready  ,
  input  wire [C_WEIGHT_AXI_DATA_WIDTH-1:0]    weight_axi_rdata   ,
  input  wire                                  weight_axi_rlast   ,
  // AXI4 master interface bias_axi
  output wire                                  bias_axi_awvalid   ,
  input  wire                                  bias_axi_awready   ,
  output wire [C_BIAS_AXI_ADDR_WIDTH-1:0]      bias_axi_awaddr    ,
  output wire [8-1:0]                          bias_axi_awlen     ,
  output wire                                  bias_axi_wvalid    ,
  input  wire                                  bias_axi_wready    ,
  output wire [C_BIAS_AXI_DATA_WIDTH-1:0]      bias_axi_wdata     ,
  output wire [C_BIAS_AXI_DATA_WIDTH/8-1:0]    bias_axi_wstrb     ,
  output wire                                  bias_axi_wlast     ,
  input  wire                                  bias_axi_bvalid    ,
  output wire                                  bias_axi_bready    ,
  output wire                                  bias_axi_arvalid   ,
  input  wire                                  bias_axi_arready   ,
  output wire [C_BIAS_AXI_ADDR_WIDTH-1:0]      bias_axi_araddr    ,
  output wire [8-1:0]                          bias_axi_arlen     ,
  input  wire                                  bias_axi_rvalid    ,
  output wire                                  bias_axi_rready    ,
  input  wire [C_BIAS_AXI_DATA_WIDTH-1:0]      bias_axi_rdata     ,
  input  wire                                  bias_axi_rlast     ,
  // AXI4 master interface feature_axi
  output wire                                  feature_axi_awvalid,
  input  wire                                  feature_axi_awready,
  output wire [C_FEATURE_AXI_ADDR_WIDTH-1:0]   feature_axi_awaddr ,
  output wire [8-1:0]                          feature_axi_awlen  ,
  output wire                                  feature_axi_wvalid ,
  input  wire                                  feature_axi_wready ,
  output wire [C_FEATURE_AXI_DATA_WIDTH-1:0]   feature_axi_wdata  ,
  output wire [C_FEATURE_AXI_DATA_WIDTH/8-1:0] feature_axi_wstrb  ,
  output wire                                  feature_axi_wlast  ,
  input  wire                                  feature_axi_bvalid ,
  output wire                                  feature_axi_bready ,
  output wire                                  feature_axi_arvalid,
  input  wire                                  feature_axi_arready,
  output wire [C_FEATURE_AXI_ADDR_WIDTH-1:0]   feature_axi_araddr ,
  output wire [8-1:0]                          feature_axi_arlen  ,
  input  wire                                  feature_axi_rvalid ,
  output wire                                  feature_axi_rready ,
  input  wire [C_FEATURE_AXI_DATA_WIDTH-1:0]   feature_axi_rdata  ,
  input  wire                                  feature_axi_rlast  ,
  // AXI4 master interface adj_axi
  output wire                                  adj_axi_awvalid    ,
  input  wire                                  adj_axi_awready    ,
  output wire [C_ADJ_AXI_ADDR_WIDTH-1:0]       adj_axi_awaddr     ,
  output wire [8-1:0]                          adj_axi_awlen      ,
  output wire                                  adj_axi_wvalid     ,
  input  wire                                  adj_axi_wready     ,
  output wire [C_ADJ_AXI_DATA_WIDTH-1:0]       adj_axi_wdata      ,
  output wire [C_ADJ_AXI_DATA_WIDTH/8-1:0]     adj_axi_wstrb      ,
  output wire                                  adj_axi_wlast      ,
  input  wire                                  adj_axi_bvalid     ,
  output wire                                  adj_axi_bready     ,
  output wire                                  adj_axi_arvalid    ,
  input  wire                                  adj_axi_arready    ,
  output wire [C_ADJ_AXI_ADDR_WIDTH-1:0]       adj_axi_araddr     ,
  output wire [8-1:0]                          adj_axi_arlen      ,
  input  wire                                  adj_axi_rvalid     ,
  output wire                                  adj_axi_rready     ,
  input  wire [C_ADJ_AXI_DATA_WIDTH-1:0]       adj_axi_rdata      ,
  input  wire                                  adj_axi_rlast      ,
  // Control Signals
  input  wire                                  ap_start           ,
  output wire                                  ap_idle            ,
  output wire                                  ap_done            ,
  output wire                                  ap_ready           ,
  input  wire [64-1:0]                         inst_addr          ,
  input  wire [64-1:0]                         weight_addr        ,
  input  wire [64-1:0]                         bias_addr          ,
  input  wire [64-1:0]                         feature_addr       ,
  input  wire [64-1:0]                         adj_addr           
);


timeunit 1ps;
timeprecision 1ps;

///////////////////////////////////////////////////////////////////////////////
// Local Parameters
///////////////////////////////////////////////////////////////////////////////
// Large enough for interesting traffic.
localparam integer  LP_DEFAULT_LENGTH_IN_BYTES = 16384;
localparam integer  LP_NUM_EXAMPLES    = 5;
// [added] parameters about instruction length
localparam integer  LP_WEIT_INST_BIT_WIDTH     = 128  ;
localparam integer  LP_BIAS_INST_BIT_WIDTH     = 128  ;
localparam integer  LP_LOAD_INST_BIT_WIDTH     = 128  ;
localparam integer  LP_SAVE_INST_BIT_WIDTH     = 128  ;
localparam integer  LP_AGG_INST_BIT_WIDTH      = 128  ;
localparam integer  LP_MM_INST_BIT_WIDTH       = 128  ;
// [added] parameters about buffer width and depth
localparam integer  LP_BUFFER_WIDTH_BIT        = 512  ;
localparam integer  LP_BUFFER_DEPTH            = 2048 ;
localparam integer  LP_BUFFER_ADDR_WIDTH_BIT   = 11   ;
// [added] parameters about parallisim
localparam integer  LP_AGG_IN_NODE             = 1    ;
localparam integer  LP_AGG_OUT_NODE            = 1    ;
localparam integer  LP_AGG_CHANNEL             = 16   ;
localparam integer  LP_MM_IN_CHANNEL           = 16   ;
localparam integer  LP_MM_OUT_CHANNEL          = 16   ;
localparam integer  LP_MM_NODE                 = 1    ;

///////////////////////////////////////////////////////////////////////////////
// Wires and Variables
///////////////////////////////////////////////////////////////////////////////
(* KEEP = "yes" *)
logic                                areset                         = 1'b0;
logic                                ap_start_r                     = 1'b0;
logic                                ap_idle_r                      = 1'b1;
logic                                ap_start_pulse                ;
// [modified]
//logic [LP_NUM_EXAMPLES-1:0]          ap_done_i                     ;
//logic [LP_NUM_EXAMPLES-1:0]          ap_done_r                      = {LP_NUM_EXAMPLES{1'b0}};
logic                                ap_done_i                     ;
logic                                ap_done_r                      = 1'b0;
logic [32-1:0]                       ctrl_xfer_size_in_bytes        = LP_DEFAULT_LENGTH_IN_BYTES;
logic [32-1:0]                       ctrl_constant                  = 32'd1;
// [added] logic signal between inst module and other modules
logic [LP_LOAD_INST_BIT_WIDTH  -1:0]    instruction_to_load   ;
logic [LP_WEIT_INST_BIT_WIDTH  -1:0]    instruction_to_weight ;
logic [LP_BIAS_INST_BIT_WIDTH  -1:0]    instruction_to_bias   ;
logic [LP_AGG_INST_BIT_WIDTH   -1:0]    instruction_to_agg    ;
logic [LP_MM_INST_BIT_WIDTH    -1:0]    instruction_to_mm     ;
logic [LP_SAVE_INST_BIT_WIDTH  -1:0]    instruction_to_save   ;
logic                                   valid_to_load         ;
logic                                   valid_to_weight       ;
logic                                   valid_to_bias         ;
logic                                   valid_to_agg          ;
logic                                   valid_to_mm           ;
logic                                   valid_to_save         ;
logic                                   done_from_load        ;
logic                                   done_from_weight      ;
logic                                   done_from_bias        ;
logic                                   done_from_agg         ;
logic                                   done_from_mm          ;
logic                                   done_from_save        ;

// [added] logic signals between modules and buffers
// weight write buffer_w
logic [1     -1:0]      weight_write_buffer_w_valid;
logic [13    -1:0]      weight_write_buffer_w_addr;
logic [8192  -1:0]      weight_write_buffer_w_data;
// bias write buffer_b
logic [1     -1:0]      bias_write_buffer_b_valid;
logic [9     -1:0]      bias_write_buffer_b_addr;
logic [512   -1:0]      bias_write_buffer_b_data;
// load write buffer_0 1 2
logic [1     -1:0]      load_write_buffer_0_valid;
logic [11    -1:0]      load_write_buffer_0_addr;
logic [512   -1:0]      load_write_buffer_0_data;

logic [1     -1:0]      load_write_buffer_1_A_valid;
logic [11    -1:0]      load_write_buffer_1_A_addr;
logic [512   -1:0]      load_write_buffer_1_A_data;

logic [1     -1:0]      load_write_buffer_1_B_valid;
logic [11    -1:0]      load_write_buffer_1_B_addr;
logic [512   -1:0]      load_write_buffer_1_B_data;

logic [1     -1:0]      load_write_buffer_2_A_valid;
logic [11    -1:0]      load_write_buffer_2_A_addr;
logic [512   -1:0]      load_write_buffer_2_A_data;

logic [1     -1:0]      load_write_buffer_2_B_valid;
logic [11    -1:0]      load_write_buffer_2_B_addr;
logic [512   -1:0]      load_write_buffer_2_B_data;
// save read buffer_1 2
logic [1     -1:0]      save_read_buffer_1_A_avalid ;
logic [11    -1:0]      save_read_buffer_1_A_addr   ;
logic [1     -1:0]      save_read_buffer_1_A_valid  ;
logic [512   -1:0]      save_read_buffer_1_A_data   ;

logic [1     -1:0]      save_read_buffer_1_B_avalid ;
logic [11    -1:0]      save_read_buffer_1_B_addr   ;
logic [1     -1:0]      save_read_buffer_1_B_valid  ;
logic [512   -1:0]      save_read_buffer_1_B_data   ;

logic [1     -1:0]      save_read_buffer_2_A_avalid ;
logic [11    -1:0]      save_read_buffer_2_A_addr   ;
logic [1     -1:0]      save_read_buffer_2_A_valid  ;
logic [512   -1:0]      save_read_buffer_2_A_data   ;

logic [1     -1:0]      save_read_buffer_2_B_avalid ;
logic [11    -1:0]      save_read_buffer_2_B_addr   ;
logic [1     -1:0]      save_read_buffer_2_B_valid  ;
logic [512   -1:0]      save_read_buffer_2_B_data   ;
// agg read buffer_0 1 write buffer 1
logic [1     -1:0]      agg_read_buffer_0_avalid    ;
logic [11    -1:0]      agg_read_buffer_0_addr      ;
logic [1     -1:0]      agg_read_buffer_0_valid     ;
logic [512   -1:0]      agg_read_buffer_0_data      ;

logic [1     -1:0]      agg_read_buffer_1_A_avalid  ;
logic [11    -1:0]      agg_read_buffer_1_A_addr    ;
logic [1     -1:0]      agg_read_buffer_1_A_valid   ;
logic [512   -1:0]      agg_read_buffer_1_A_data    ;

logic [1     -1:0]      agg_read_buffer_1_B_avalid  ;
logic [11    -1:0]      agg_read_buffer_1_B_addr    ;
logic [1     -1:0]      agg_read_buffer_1_B_valid   ;
logic [512   -1:0]      agg_read_buffer_1_B_data    ;

logic [1     -1:0]      agg_write_buffer_1_A_valid  ;
logic [11    -1:0]      agg_write_buffer_1_A_addr   ;
logic [512   -1:0]      agg_write_buffer_1_A_data   ;

logic [1     -1:0]      agg_write_buffer_1_B_valid  ;
logic [11    -1:0]      agg_write_buffer_1_B_addr   ;
logic [512   -1:0]      agg_write_buffer_1_B_data   ;
// mm read buffer_1 2 write buffer 2
logic [1     -1:0]      mm_read_buffer_1_A_avalid;
logic [11    -1:0]      mm_read_buffer_1_A_addr;
logic [1     -1:0]      mm_read_buffer_1_A_valid;
logic [512   -1:0]      mm_read_buffer_1_A_data;

logic [1     -1:0]      mm_read_buffer_1_B_avalid;
logic [11    -1:0]      mm_read_buffer_1_B_addr;
logic [1     -1:0]      mm_read_buffer_1_B_valid;
logic [512   -1:0]      mm_read_buffer_1_B_data;

logic [1     -1:0]      mm_read_buffer_2_A_avalid;
logic [11    -1:0]      mm_read_buffer_2_A_addr;
logic [1     -1:0]      mm_read_buffer_2_A_valid;
logic [512   -1:0]      mm_read_buffer_2_A_data;

logic [1     -1:0]      mm_read_buffer_2_B_avalid;
logic [11    -1:0]      mm_read_buffer_2_B_addr;
logic [1     -1:0]      mm_read_buffer_2_B_valid;
logic [512   -1:0]      mm_read_buffer_2_B_data;

logic [1     -1:0]      mm_write_buffer_2_A_valid;
logic [11    -1:0]      mm_write_buffer_2_A_addr;
logic [512   -1:0]      mm_write_buffer_2_A_data;

logic [1     -1:0]      mm_write_buffer_2_B_valid;
logic [11    -1:0]      mm_write_buffer_2_B_addr;
logic [512   -1:0]      mm_write_buffer_2_B_data;
// agg read buffer_b
logic [1     -1:0]      agg_read_buffer_b_avalid;
logic [9     -1:0]      agg_read_buffer_b_addr;
logic [1     -1:0]      agg_read_buffer_b_valid;
logic [512   -1:0]      agg_read_buffer_b_data;
// mm read buffer_b
logic [1     -1:0]      mm_read_buffer_b_avalid;
logic [9     -1:0]      mm_read_buffer_b_addr;
logic [1     -1:0]      mm_read_buffer_b_valid;
logic [512   -1:0]      mm_read_buffer_b_data;
// mm read buffer_w
logic [1     -1:0]      mm_read_buffer_w_avalid;
logic [13    -1:0]      mm_read_buffer_w_addr;
logic [1     -1:0]      mm_read_buffer_w_valid;
logic [8192  -1:0]      mm_read_buffer_w_data;

///////////////////////////////////////////////////////////////////////////////
// Begin RTL
///////////////////////////////////////////////////////////////////////////////

// Register and invert reset signal.
always @(posedge ap_clk) begin
  areset <= ~ap_rst_n;
end

// create pulse when ap_start transitions to 1
always @(posedge ap_clk) begin
  begin
    ap_start_r <= ap_start;
  end
end

assign ap_start_pulse = ap_start & ~ap_start_r;

// ap_idle is asserted when done is asserted, it is de-asserted when ap_start_pulse
// is asserted
always @(posedge ap_clk) begin
  if (areset) begin
    ap_idle_r <= 1'b1;
  end
  else begin
    ap_idle_r <= ap_done ? 1'b1 :
      ap_start_pulse ? 1'b0 : ap_idle;
  end
end

assign ap_idle = ap_idle_r;

// Done logic
always @(posedge ap_clk) begin
  if (areset) begin
    ap_done_r <= '0;
  end
  else begin
    ap_done_r <= (ap_done) ? '0 : ap_done_r | ap_done_i;
  end
end

// [modified]
//assign ap_done = &ap_done_r;
assign ap_done = ap_done_r;

// Ready Logic (non-pipelined case)
assign ap_ready = ap_done;


// [modifed] our modules are modified a lot from example_vadd modules
// inst module
inst #(
  // [added] parameters about inst length
  .WEIT_INST_BIT_WIDTH   ( LP_WEIT_INST_BIT_WIDTH),
  .BIAS_INST_BIT_WIDTH   ( LP_BIAS_INST_BIT_WIDTH),
  .LOAD_INST_BIT_WIDTH   ( LP_LOAD_INST_BIT_WIDTH),
  .SAVE_INST_BIT_WIDTH   ( LP_SAVE_INST_BIT_WIDTH),
  .AGG_INST_BIT_WIDTH    ( LP_AGG_INST_BIT_WIDTH ),
  .MM_INST_BIT_WIDTH     ( LP_MM_INST_BIT_WIDTH  ),
  // generated parameter 
  .C_M_AXI_ADDR_WIDTH ( C_INST_AXI_ADDR_WIDTH ),
  .C_M_AXI_DATA_WIDTH ( C_INST_AXI_DATA_WIDTH ),
  .C_ADDER_BIT_WIDTH  ( 32                    ),
  .C_XFER_SIZE_WIDTH  ( 32                    )
)
inst_inst (
  // generated cpu-fpga ctrl signal
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .kernel_clk              ( ap_clk                  ),
  .kernel_rst              ( areset                  ),
  // [modified] ctrl signals
  .ctrl_addr_offset        ( inst_addr               ),
  .ap_start                ( ap_start_pulse          ),
  .ap_done                 ( ap_done_i               ),
  // [added] inst module - other module ctrl signal
  .instruction_to_load     ( instruction_to_load     ),
  .instruction_to_weight   ( instruction_to_weight   ),
  .instruction_to_bias     ( instruction_to_bias     ),
  .instruction_to_agg      ( instruction_to_agg      ),
  .instruction_to_mm       ( instruction_to_mm       ),
  .instruction_to_save     ( instruction_to_save     ),
  .valid_to_load           ( valid_to_load           ),
  .valid_to_weight         ( valid_to_weight         ),
  .valid_to_bias           ( valid_to_bias           ),
  .valid_to_agg            ( valid_to_agg            ),
  .valid_to_mm             ( valid_to_mm             ),
  .valid_to_save           ( valid_to_save           ),
  .done_from_load          ( done_from_load          ),
  .done_from_weight        ( done_from_weight        ),
  .done_from_bias          ( done_from_bias          ),
  .done_from_agg           ( done_from_agg           ),
  .done_from_mm            ( done_from_mm            ),
  .done_from_save          ( done_from_save          ),
  // axi ports (don't change)
  .m_axi_awvalid           ( inst_axi_awvalid        ),
  .m_axi_awready           ( inst_axi_awready        ),
  .m_axi_awaddr            ( inst_axi_awaddr         ),
  .m_axi_awlen             ( inst_axi_awlen          ),
  .m_axi_wvalid            ( inst_axi_wvalid         ),
  .m_axi_wready            ( inst_axi_wready         ),
  .m_axi_wdata             ( inst_axi_wdata          ),
  .m_axi_wstrb             ( inst_axi_wstrb          ),
  .m_axi_wlast             ( inst_axi_wlast          ),
  .m_axi_bvalid            ( inst_axi_bvalid         ),
  .m_axi_bready            ( inst_axi_bready         ),
  .m_axi_arvalid           ( inst_axi_arvalid        ),
  .m_axi_arready           ( inst_axi_arready        ),
  .m_axi_araddr            ( inst_axi_araddr         ),
  .m_axi_arlen             ( inst_axi_arlen          ),
  .m_axi_rvalid            ( inst_axi_rvalid         ),
  .m_axi_rready            ( inst_axi_rready         ),
  .m_axi_rdata             ( inst_axi_rdata          ),
  .m_axi_rlast             ( inst_axi_rlast          )
);


// [added] weight module
weight #(
  // added parameters about inst length
  .WEIT_INST_BIT_WIDTH( LP_WEIT_INST_BIT_WIDTH ),
  .C_M_AXI_ADDR_WIDTH ( C_WEIGHT_AXI_ADDR_WIDTH ),
  .C_M_AXI_DATA_WIDTH ( C_WEIGHT_AXI_DATA_WIDTH ),
  .C_ADDER_BIT_WIDTH  ( 32                      ),
  .C_XFER_SIZE_WIDTH  ( 32                      )
)
inst_weight (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .kernel_clk              ( ap_clk                  ),
  .kernel_rst              ( areset                  ),
  // ctrl signals
  .ctrl_addr_offset        ( weight_addr             ),
  .ctrl_instruction        ( instruction_to_weight   ),
  .ap_start                ( valid_to_weight         ),
  .ap_done                 ( done_from_weight        ),
  // weight buffer port
  .weight_write_buffer_w_valid (weight_write_buffer_w_valid),
  .weight_write_buffer_w_addr  (weight_write_buffer_w_addr ),
  .weight_write_buffer_w_data  (weight_write_buffer_w_data ),
  // weight axi port (don't change)
  .m_axi_arvalid           ( weight_axi_arvalid      ),
  .m_axi_arready           ( weight_axi_arready      ),
  .m_axi_araddr            ( weight_axi_araddr       ),
  .m_axi_arlen             ( weight_axi_arlen        ),
  .m_axi_rvalid            ( weight_axi_rvalid       ),
  .m_axi_rready            ( weight_axi_rready       ),
  .m_axi_rdata             ( weight_axi_rdata        ),
  .m_axi_rlast             ( weight_axi_rlast        )
);


// [added] bias module
bias #(
  // added parameters about inst length
  .BIAS_INST_BIT_WIDTH( LP_BIAS_INST_BIT_WIDTH ),
  .C_M_AXI_ADDR_WIDTH ( C_BIAS_AXI_ADDR_WIDTH ),
  .C_M_AXI_DATA_WIDTH ( C_BIAS_AXI_DATA_WIDTH ),
  .C_ADDER_BIT_WIDTH  ( 32                    ),
  .C_XFER_SIZE_WIDTH  ( 32                    )
)
inst_bias (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .kernel_clk              ( ap_clk                  ),
  .kernel_rst              ( areset                  ),
  // ctrl signals
  .ctrl_addr_offset        ( bias_addr               ),
  .ctrl_instruction        ( instruction_to_bias     ),
  .ap_start                ( valid_to_bias           ),
  .ap_done                 ( done_from_bias          ),
  // bias buffer port
  .bias_write_buffer_b_valid (bias_write_buffer_b_valid),
  .bias_write_buffer_b_addr  (bias_write_buffer_b_addr ),
  .bias_write_buffer_b_data  (bias_write_buffer_b_data ),
  // bias axi port (don't change)
  .m_axi_arvalid           ( bias_axi_arvalid        ),
  .m_axi_arready           ( bias_axi_arready        ),
  .m_axi_araddr            ( bias_axi_araddr         ),
  .m_axi_arlen             ( bias_axi_arlen          ),
  .m_axi_rvalid            ( bias_axi_rvalid         ),
  .m_axi_rready            ( bias_axi_rready         ),
  .m_axi_rdata             ( bias_axi_rdata          ),
  .m_axi_rlast             ( bias_axi_rlast          )
);


// [added] load module
load #(
  // added parameters about inst length
  .LOAD_INST_BIT_WIDTH( LP_LOAD_INST_BIT_WIDTH  ),
  .C_M_AXI_ADDR_WIDTH ( C_FEATURE_AXI_ADDR_WIDTH ),
  .C_M_AXI_DATA_WIDTH ( C_FEATURE_AXI_DATA_WIDTH ),
  .C_ADDER_BIT_WIDTH  ( 32                       ),
  .C_XFER_SIZE_WIDTH  ( 32                       )
)
inst_load(
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .kernel_clk              ( ap_clk                  ),
  .kernel_rst              ( areset                  ),
  // ctrl signals
  .ctrl_addr_offset        ( feature_addr            ),
  .ctrl_instruction        ( instruction_to_load     ),
  .ap_start                ( valid_to_load           ),
  .ap_done                 ( done_from_load          ),
  // load buffer ports
  .load_write_buffer_0_valid   (load_write_buffer_0_valid  ),
  .load_write_buffer_0_addr    (load_write_buffer_0_addr   ),
  .load_write_buffer_0_data    (load_write_buffer_0_data   ),
  .load_write_buffer_1_A_valid (load_write_buffer_1_A_valid),
  .load_write_buffer_1_A_addr  (load_write_buffer_1_A_addr ),
  .load_write_buffer_1_A_data  (load_write_buffer_1_A_data ),
  .load_write_buffer_1_B_valid (load_write_buffer_1_B_valid),
  .load_write_buffer_1_B_addr  (load_write_buffer_1_B_addr ),
  .load_write_buffer_1_B_data  (load_write_buffer_1_B_data ),
  .load_write_buffer_2_A_valid (load_write_buffer_2_A_valid),
  .load_write_buffer_2_A_addr  (load_write_buffer_2_A_addr ),
  .load_write_buffer_2_A_data  (load_write_buffer_2_A_data ),
  .load_write_buffer_2_B_valid (load_write_buffer_2_B_valid),
  .load_write_buffer_2_B_addr  (load_write_buffer_2_B_addr ),
  .load_write_buffer_2_B_data  (load_write_buffer_2_B_data ),
  // feature axi port (don't change)
  .m_axi_arvalid           ( feature_axi_arvalid     ),
  .m_axi_arready           ( feature_axi_arready     ),
  .m_axi_araddr            ( feature_axi_araddr      ),
  .m_axi_arlen             ( feature_axi_arlen       ),
  .m_axi_rvalid            ( feature_axi_rvalid      ),
  .m_axi_rready            ( feature_axi_rready      ),
  .m_axi_rdata             ( feature_axi_rdata       ),
  .m_axi_rlast             ( feature_axi_rlast       )
);


// [added] save module
save #(
  // added parameters about inst length
  .SAVE_INST_BIT_WIDTH( LP_SAVE_INST_BIT_WIDTH  ),
  .C_M_AXI_ADDR_WIDTH ( C_FEATURE_AXI_ADDR_WIDTH ),
  .C_M_AXI_DATA_WIDTH ( C_FEATURE_AXI_DATA_WIDTH ),
  .C_ADDER_BIT_WIDTH  ( 32                       ),
  .C_XFER_SIZE_WIDTH  ( 32                       )
)
inst_save(
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .kernel_clk              ( ap_clk                  ),
  .kernel_rst              ( areset                  ),
  // ctrl signals
  .ctrl_addr_offset        ( feature_addr            ),
  .ctrl_instruction        ( instruction_to_save     ),
  .ap_start                ( valid_to_save           ),
  .ap_done                 ( done_from_save          ),
  // load buffer ports
  .save_read_buffer_1_A_avalid (save_read_buffer_1_A_avalid),
  .save_read_buffer_1_A_addr   (save_read_buffer_1_A_addr  ),
  .save_read_buffer_1_A_valid  (save_read_buffer_1_A_valid ),
  .save_read_buffer_1_A_data   (save_read_buffer_1_A_data  ),
  .save_read_buffer_1_B_avalid (save_read_buffer_1_B_avalid),
  .save_read_buffer_1_B_addr   (save_read_buffer_1_B_addr  ),
  .save_read_buffer_1_B_valid  (save_read_buffer_1_B_valid ),
  .save_read_buffer_1_B_data   (save_read_buffer_1_B_data  ),
  .save_read_buffer_2_A_avalid (save_read_buffer_2_A_avalid),
  .save_read_buffer_2_A_addr   (save_read_buffer_2_A_addr  ),
  .save_read_buffer_2_A_valid  (save_read_buffer_2_A_valid ),
  .save_read_buffer_2_A_data   (save_read_buffer_2_A_data  ),
  .save_read_buffer_2_B_avalid (save_read_buffer_2_B_avalid),
  .save_read_buffer_2_B_addr   (save_read_buffer_2_B_addr  ),
  .save_read_buffer_2_B_valid  (save_read_buffer_2_B_valid ),
  .save_read_buffer_2_B_data   (save_read_buffer_2_B_data  ),
  // feature axi port (don't change)
  .m_axi_awvalid           ( feature_axi_awvalid     ),
  .m_axi_awready           ( feature_axi_awready     ),
  .m_axi_awaddr            ( feature_axi_awaddr      ),
  .m_axi_awlen             ( feature_axi_awlen       ),
  .m_axi_wvalid            ( feature_axi_wvalid      ),
  .m_axi_wready            ( feature_axi_wready      ),
  .m_axi_wdata             ( feature_axi_wdata       ),
  .m_axi_wstrb             ( feature_axi_wstrb       ),
  .m_axi_wlast             ( feature_axi_wlast       ),
  .m_axi_bvalid            ( feature_axi_bvalid      ),
  .m_axi_bready            ( feature_axi_bready      )
);


// [added] agg module
agg #(
  .AGG_INST_BIT_WIDTH ( LP_AGG_INST_BIT_WIDTH  ),
  .C_M_AXI_ADDR_WIDTH ( C_ADJ_AXI_ADDR_WIDTH   ),
  .C_M_AXI_DATA_WIDTH ( C_ADJ_AXI_DATA_WIDTH   ),
  .C_ADDER_BIT_WIDTH  ( 32                     ),
  .C_XFER_SIZE_WIDTH  ( 32                     )
)
inst_agg (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .kernel_clk              ( ap_clk                  ),
  .kernel_rst              ( areset                  ),
  // ctrl signals
  .ctrl_addr_offset        ( adj_addr                ),
  .ctrl_instruction        ( instruction_to_agg      ),
  .ap_start                ( valid_to_agg            ),
  .ap_done                 ( done_from_agg           ),
  // agg buffer ports
  .agg_read_buffer_b_avalid    (agg_read_buffer_b_avalid   ),
  .agg_read_buffer_b_addr      (agg_read_buffer_b_addr     ),
  .agg_read_buffer_b_valid     (agg_read_buffer_b_valid    ),
  .agg_read_buffer_b_data      (agg_read_buffer_b_data     ),
  .agg_read_buffer_0_avalid    (agg_read_buffer_0_avalid   ),
  .agg_read_buffer_0_addr      (agg_read_buffer_0_addr     ),
  .agg_read_buffer_0_valid     (agg_read_buffer_0_valid    ),
  .agg_read_buffer_0_data      (agg_read_buffer_0_data     ),
  .agg_read_buffer_1_A_avalid  (agg_read_buffer_1_A_avalid ),
  .agg_read_buffer_1_A_addr    (agg_read_buffer_1_A_addr   ),
  .agg_read_buffer_1_A_valid   (agg_read_buffer_1_A_valid  ),
  .agg_read_buffer_1_A_data    (agg_read_buffer_1_A_data   ),
  .agg_read_buffer_1_B_avalid  (agg_read_buffer_1_B_avalid ),
  .agg_read_buffer_1_B_addr    (agg_read_buffer_1_B_addr   ),
  .agg_read_buffer_1_B_valid   (agg_read_buffer_1_B_valid  ),
  .agg_read_buffer_1_B_data    (agg_read_buffer_1_B_data   ),
  .agg_write_buffer_1_A_valid  (agg_write_buffer_1_A_valid ),
  .agg_write_buffer_1_A_addr   (agg_write_buffer_1_A_addr  ),
  .agg_write_buffer_1_A_data   (agg_write_buffer_1_A_data  ),
  .agg_write_buffer_1_B_valid  (agg_write_buffer_1_B_valid ),
  .agg_write_buffer_1_B_addr   (agg_write_buffer_1_B_addr  ),
  .agg_write_buffer_1_B_data   (agg_write_buffer_1_B_data  ),
  .agg_read_buffer_b_avalid    (agg_read_buffer_b_avalid   ),
  .agg_read_buffer_b_addr      (agg_read_buffer_b_addr     ),
  .agg_read_buffer_b_valid     (agg_read_buffer_b_valid    ),
  .agg_read_buffer_b_data      (agg_read_buffer_b_data     ),
  // adj axi port (don't change)
  .m_axi_arvalid           ( adj_axi_arvalid         ),
  .m_axi_arready           ( adj_axi_arready         ),
  .m_axi_araddr            ( adj_axi_araddr          ),
  .m_axi_arlen             ( adj_axi_arlen           ),
  .m_axi_rvalid            ( adj_axi_rvalid          ),
  .m_axi_rready            ( adj_axi_rready          ),
  .m_axi_rdata             ( adj_axi_rdata           ),
  .m_axi_rlast             ( adj_axi_rlast           )
);


// [added] mm module
mm #(
  .MM_INST_BIT_WIDTH       ( LP_MM_INST_BIT_WIDTH    )
)
inst_mm (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .kernel_clk              ( ap_clk                  ),
  .kernel_rst              ( areset                  ),
  // ctrl signals
  .ctrl_instruction        ( instruction_to_mm       ),
  .ap_start                ( valid_to_mm             ),
  .ap_done                 ( done_from_mm            ),
  // mm buffer ports
  .mm_read_buffer_b_avalid    (mm_read_buffer_b_avalid   ),
  .mm_read_buffer_b_addr      (mm_read_buffer_b_addr     ),
  .mm_read_buffer_b_valid     (mm_read_buffer_b_valid    ),
  .mm_read_buffer_b_data      (mm_read_buffer_b_data     ),
  .mm_read_buffer_w_avalid    (mm_read_buffer_w_avalid   ),
  .mm_read_buffer_w_addr      (mm_read_buffer_w_addr     ),
  .mm_read_buffer_w_valid     (mm_read_buffer_w_valid    ),
  .mm_read_buffer_w_data      (mm_read_buffer_w_data     ),
  .mm_read_buffer_1_A_avalid  (mm_read_buffer_1_A_avalid ),
  .mm_read_buffer_1_A_addr    (mm_read_buffer_1_A_addr   ),
  .mm_read_buffer_1_A_valid   (mm_read_buffer_1_A_valid  ),
  .mm_read_buffer_1_A_data    (mm_read_buffer_1_A_data   ),
  .mm_read_buffer_1_B_avalid  (mm_read_buffer_1_B_avalid ),
  .mm_read_buffer_1_B_addr    (mm_read_buffer_1_B_addr   ),
  .mm_read_buffer_1_B_valid   (mm_read_buffer_1_B_valid  ),
  .mm_read_buffer_1_B_data    (mm_read_buffer_1_B_data   ),
  .mm_read_buffer_2_A_avalid  (mm_read_buffer_2_A_avalid ),
  .mm_read_buffer_2_A_addr    (mm_read_buffer_2_A_addr   ),
  .mm_read_buffer_2_A_valid   (mm_read_buffer_2_A_valid  ),
  .mm_read_buffer_2_A_data    (mm_read_buffer_2_A_data   ),
  .mm_read_buffer_2_B_avalid  (mm_read_buffer_2_B_avalid ),
  .mm_read_buffer_2_B_addr    (mm_read_buffer_2_B_addr   ),
  .mm_read_buffer_2_B_valid   (mm_read_buffer_2_B_valid  ),
  .mm_read_buffer_2_B_data    (mm_read_buffer_2_B_data   ),
  .mm_write_buffer_2_A_valid  (mm_write_buffer_2_A_valid ),
  .mm_write_buffer_2_A_addr   (mm_write_buffer_2_A_addr  ),
  .mm_write_buffer_2_A_data   (mm_write_buffer_2_A_data  ),
  .mm_write_buffer_2_B_valid  (mm_write_buffer_2_B_valid ),
  .mm_write_buffer_2_B_addr   (mm_write_buffer_2_B_addr  ),
  .mm_write_buffer_2_B_data   (mm_write_buffer_2_B_data  ),
  .mm_read_buffer_b_avalid    (mm_read_buffer_b_avalid   ),
  .mm_read_buffer_b_addr      (mm_read_buffer_b_addr     ),
  .mm_read_buffer_b_valid     (mm_read_buffer_b_valid    ),
  .mm_read_buffer_b_data      (mm_read_buffer_b_data     ),
  .mm_read_buffer_w_avalid    (mm_read_buffer_w_avalid   ),
  .mm_read_buffer_w_addr      (mm_read_buffer_w_addr     ),
  .mm_read_buffer_w_valid     (mm_read_buffer_w_valid    ),
  .mm_read_buffer_w_data      (mm_read_buffer_w_data     ) 
);


// [added] buffer_b
buffer_b #(
  .BUFFER_WIDTH    ( LP_BUFFER_WIDTH_BIT    ),
  .BUFFER_DEPTH    ( 512                    )
)
inst_buffer_b_m (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .bias_write_buffer_b_valid   (bias_write_buffer_b_valid  ),
  .bias_write_buffer_b_addr    (bias_write_buffer_b_addr   ),
  .bias_write_buffer_b_data    (bias_write_buffer_b_data   ),
  .mm_read_buffer_b_avalid     (mm_read_buffer_b_avalid    ),
  .mm_read_buffer_b_addr       (mm_read_buffer_b_addr      ),
  .mm_read_buffer_b_valid      (mm_read_buffer_b_valid     ),
  .mm_read_buffer_b_data       (mm_read_buffer_b_data      )
);
buffer_b #(
  .BUFFER_WIDTH    ( LP_BUFFER_WIDTH_BIT    ),
  .BUFFER_DEPTH    ( 512                    )
)
inst_buffer_b_a (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .bias_write_buffer_b_valid   (bias_write_buffer_b_valid  ),
  .bias_write_buffer_b_addr    (bias_write_buffer_b_addr   ),
  .bias_write_buffer_b_data    (bias_write_buffer_b_data   ),
  .mm_read_buffer_b_avalid     (agg_read_buffer_b_avalid   ),
  .mm_read_buffer_b_addr       (agg_read_buffer_b_addr     ),
  .mm_read_buffer_b_valid      (agg_read_buffer_b_valid    ),
  .mm_read_buffer_b_data       (agg_read_buffer_b_data     )
);


// [added] buffer_w
buffer_w #(
  .BUFFER_WIDTH    ( 8192                   ),
  .BUFFER_DEPTH    ( 8192                   )
)
inst_buffer_w (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .weight_write_buffer_w_valid (weight_write_buffer_w_valid  ),
  .weight_write_buffer_w_addr  (weight_write_buffer_w_addr   ),
  .weight_write_buffer_w_data  (weight_write_buffer_w_data   ),
  .mm_read_buffer_w_avalid     (mm_read_buffer_w_avalid    ),
  .mm_read_buffer_w_addr       (mm_read_buffer_w_addr      ),
  .mm_read_buffer_w_valid      (mm_read_buffer_w_valid     ),
  .mm_read_buffer_w_data       (mm_read_buffer_w_data      )
);

// [added] buffer_0
buffer_0 #(
  .BUFFER_WIDTH    ( LP_BUFFER_WIDTH_BIT    ),
  .BUFFER_DEPTH    ( LP_BUFFER_DEPTH        )
)
inst_buffer_0 (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .load_write_buffer_0_valid   (load_write_buffer_0_valid  ),
  .load_write_buffer_0_addr    (load_write_buffer_0_addr   ),
  .load_write_buffer_0_data    (load_write_buffer_0_data   ),
  .agg_read_buffer_0_avalid    (agg_read_buffer_0_avalid   ),
  .agg_read_buffer_0_addr      (agg_read_buffer_0_addr     ),
  .agg_read_buffer_0_valid     (agg_read_buffer_0_valid    ),
  .agg_read_buffer_0_data      (agg_read_buffer_0_data     )
);


// [added] buffer_1
buffer_1 #(
  .BUFFER_WIDTH    ( LP_BUFFER_WIDTH_BIT    ),
  .BUFFER_DEPTH    ( LP_BUFFER_DEPTH        )
)
inst_buffer_1_A (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .load_write_buffer_1_valid   (load_write_buffer_1_A_valid  ),
  .load_write_buffer_1_addr    (load_write_buffer_1_A_addr   ),
  .load_write_buffer_1_data    (load_write_buffer_1_A_data   ),
  .agg_write_buffer_1_valid    (agg_write_buffer_1_A_valid   ),
  .agg_write_buffer_1_addr     (agg_write_buffer_1_A_addr    ),
  .agg_write_buffer_1_data     (agg_write_buffer_1_A_data    ),
  .agg_read_buffer_1_avalid    (agg_read_buffer_1_A_avalid   ),
  .agg_read_buffer_1_addr      (agg_read_buffer_1_A_addr     ),
  .agg_read_buffer_1_valid     (agg_read_buffer_1_A_valid    ),
  .agg_read_buffer_1_data      (agg_read_buffer_1_A_data     ),
  .mm_read_buffer_1_avalid     (mm_read_buffer_1_A_avalid    ),
  .mm_read_buffer_1_addr       (mm_read_buffer_1_A_addr      ),
  .mm_read_buffer_1_valid      (mm_read_buffer_1_A_valid     ),
  .mm_read_buffer_1_data       (mm_read_buffer_1_A_data      ),
  .save_read_buffer_1_avalid   (save_read_buffer_1_A_avalid  ),
  .save_read_buffer_1_addr     (save_read_buffer_1_A_addr    ),
  .save_read_buffer_1_valid    (save_read_buffer_1_A_valid   ),
  .save_read_buffer_1_data     (save_read_buffer_1_A_data    )
);

buffer_1 #(
  .BUFFER_WIDTH    ( LP_BUFFER_WIDTH_BIT    ),
  .BUFFER_DEPTH    ( LP_BUFFER_DEPTH        )
)
inst_buffer_1_B (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .load_write_buffer_1_valid   (load_write_buffer_1_A_valid  ),
  .load_write_buffer_1_addr    (load_write_buffer_1_B_addr   ),
  .load_write_buffer_1_data    (load_write_buffer_1_B_data   ),
  .agg_write_buffer_1_valid    (agg_write_buffer_1_B_valid   ),
  .agg_write_buffer_1_addr     (agg_write_buffer_1_B_addr    ),
  .agg_write_buffer_1_data     (agg_write_buffer_1_B_data    ),
  .agg_read_buffer_1_avalid    (agg_read_buffer_1_B_avalid   ),
  .agg_read_buffer_1_addr      (agg_read_buffer_1_B_addr     ),
  .agg_read_buffer_1_valid     (agg_read_buffer_1_B_valid    ),
  .agg_read_buffer_1_data      (agg_read_buffer_1_B_data     ),
  .mm_read_buffer_1_avalid     (mm_read_buffer_1_B_avalid    ),
  .mm_read_buffer_1_addr       (mm_read_buffer_1_B_addr      ),
  .mm_read_buffer_1_valid      (mm_read_buffer_1_B_valid     ),
  .mm_read_buffer_1_data       (mm_read_buffer_1_B_data      ),
  .save_read_buffer_1_avalid   (save_read_buffer_1_B_avalid  ),
  .save_read_buffer_1_addr     (save_read_buffer_1_B_addr    ),
  .save_read_buffer_1_valid    (save_read_buffer_1_B_valid   ),
  .save_read_buffer_1_data     (save_read_buffer_1_B_data    )
);


// [added] buffer_2
buffer_2 #(
  .BUFFER_WIDTH    ( LP_BUFFER_WIDTH_BIT    ),
  .BUFFER_DEPTH    ( LP_BUFFER_DEPTH        )
)
inst_buffer_2_A (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .load_write_buffer_2_valid   (load_write_buffer_2_A_valid  ),
  .load_write_buffer_2_addr    (load_write_buffer_2_A_addr   ),
  .load_write_buffer_2_data    (load_write_buffer_2_A_data   ),
  .mm_write_buffer_2_valid     (mm_write_buffer_2_A_valid    ),
  .mm_write_buffer_2_addr      (mm_write_buffer_2_A_addr     ),
  .mm_write_buffer_2_data      (mm_write_buffer_2_A_data     ),
  .mm_read_buffer_2_avalid     (mm_read_buffer_2_A_avalid    ),
  .mm_read_buffer_2_addr       (mm_read_buffer_2_A_addr      ),
  .mm_read_buffer_2_valid      (mm_read_buffer_2_A_valid     ),
  .mm_read_buffer_2_data       (mm_read_buffer_2_A_data      ),
  .save_read_buffer_2_avalid   (save_read_buffer_2_A_avalid  ),
  .save_read_buffer_2_addr     (save_read_buffer_2_A_addr    ),
  .save_read_buffer_2_valid    (save_read_buffer_2_A_valid   ),
  .save_read_buffer_2_data     (save_read_buffer_2_A_data    )
);

buffer_2 #(
  .BUFFER_WIDTH    ( LP_BUFFER_WIDTH_BIT    ),
  .BUFFER_DEPTH    ( LP_BUFFER_DEPTH        )
)
inst_buffer_2_B (
  .aclk                    ( ap_clk                  ),
  .areset                  ( areset                  ),
  .load_write_buffer_2_valid   (load_write_buffer_2_B_valid  ),
  .load_write_buffer_2_addr    (load_write_buffer_2_B_addr   ),
  .load_write_buffer_2_data    (load_write_buffer_2_B_data   ),
  .mm_write_buffer_2_valid     (mm_write_buffer_2_B_valid    ),
  .mm_write_buffer_2_addr      (mm_write_buffer_2_B_addr     ),
  .mm_write_buffer_2_data      (mm_write_buffer_2_B_data     ),
  .mm_read_buffer_2_avalid     (mm_read_buffer_2_B_avalid    ),
  .mm_read_buffer_2_addr       (mm_read_buffer_2_B_addr      ),
  .mm_read_buffer_2_valid      (mm_read_buffer_2_B_valid     ),
  .mm_read_buffer_2_data       (mm_read_buffer_2_B_data      ),
  .save_read_buffer_2_avalid   (save_read_buffer_2_B_avalid  ),
  .save_read_buffer_2_addr     (save_read_buffer_2_B_addr    ),
  .save_read_buffer_2_valid    (save_read_buffer_2_B_valid   ),
  .save_read_buffer_2_data     (save_read_buffer_2_B_data    )
);

endmodule : gnn_0_example
`default_nettype wire
